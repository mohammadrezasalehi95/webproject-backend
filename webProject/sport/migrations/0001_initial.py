# Generated by Django 2.1.5 on 2019-01-30 10:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SiteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('age', models.IntegerField()),
                ('bio', models.TextField(max_length=2000)),
                ('image', models.ImageField(null=True, upload_to='assets/sport/users')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BasketSeasonDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(max_length=20)),
                ('twoscoreGoals', models.IntegerField(blank=True, null=True)),
                ('threescoreGoals', models.IntegerField(blank=True, null=True)),
                ('fault', models.IntegerField(blank=True, null=True)),
                ('ribsndhs', models.IntegerField(blank=True, null=True)),
                ('playTime', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Cup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('type', models.IntegerField(choices=[(4, 4), (8, 8), (16, 16), (32, 32), (64, 64), (128, 128)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FootBallSeasonDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(blank=True, max_length=20, null=True)),
                ('goals', models.IntegerField(blank=True, null=True)),
                ('goalPass', models.IntegerField(blank=True, null=True)),
                ('cards', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True)),
                ('status', models.IntegerField(blank=True)),
                ('team1_score', models.IntegerField(blank=True)),
                ('team2_score', models.IntegerField(blank=True)),
                ('team1_point', models.IntegerField(blank=True, default=0)),
                ('team2_point', models.IntegerField(blank=True, default=0)),
                ('type', models.CharField(choices=[('F', 'FootBall'), ('B', 'BasketBall')], max_length=20, null=True)),
                ('media1', models.FileField(null=True, upload_to='assets/sport/games')),
                ('media2', models.FileField(null=True, upload_to='assets/sport/games')),
            ],
        ),
        migrations.CreateModel(
            name='Game_Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(blank=True)),
                ('text', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Game_Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('post', models.CharField(blank=True, max_length=20)),
                ('changingTime', models.CharField(blank=True, max_length=20)),
                ('playTime', models.IntegerField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='GameSpecialDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team1', models.IntegerField(blank=True)),
                ('team2', models.IntegerField(blank=True)),
                ('title', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('type', models.CharField(choices=[('F', 'FootBall'), ('B', 'BasketBall')], max_length=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeagueRow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('finished_game', models.IntegerField(blank=True)),
                ('win', models.IntegerField(blank=True)),
                ('lose', models.IntegerField(blank=True)),
                ('equal', models.IntegerField(blank=True)),
                ('point', models.IntegerField(blank=True)),
                ('gf', models.IntegerField(blank=True)),
                ('ga', models.IntegerField(blank=True)),
                ('league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sport.League')),
            ],
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=500)),
                ('subtitle', models.TextField(max_length=500)),
                ('content', models.TextField(max_length=2000)),
                ('releaseTime', models.DateTimeField(auto_now_add=True, null=True)),
                ('image', models.ImageField(null=True, upload_to='assets/sport/news')),
                ('source', models.CharField(max_length=20, null=True)),
                ('media', models.FileField(null=True, upload_to='assets/sport/news')),
                ('relateds', models.ManyToManyField(blank=True, to='sport.New')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
                ('bio', models.TextField(max_length=500)),
                ('gender', models.CharField(max_length=5)),
                ('image', models.ImageField(null=True, upload_to='assets/sport/players')),
                ('born', models.DateField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('national', models.CharField(max_length=20, null=True)),
                ('rule', models.CharField(max_length=20, null=True)),
                ('previousClub', models.CharField(max_length=20, null=True)),
                ('squad', models.CharField(max_length=20, null=True)),
                ('type', models.CharField(choices=[('F', 'FootBall'), ('B', 'BasketBall')], max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('bio', models.TextField(max_length=500)),
                ('image', models.ImageField(default='default_team.jpg', null=True, upload_to='assets/sport/team')),
            ],
        ),
        migrations.CreateModel(
            name='Game_Report',
            fields=[
                ('game', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sport.Game')),
                ('last_report', models.TextField(max_length=500)),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='currentTeam',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sport.Team'),
        ),
        migrations.AddField(
            model_name='leaguerow',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sport.Team'),
        ),
        migrations.AddField(
            model_name='league',
            name='match',
            field=models.ManyToManyField(to='sport.Game'),
        ),
        migrations.AddField(
            model_name='gamespecialdetail',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sport.Game'),
        ),
        migrations.AddField(
            model_name='game_player',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sport.Game'),
        ),
        migrations.AddField(
            model_name='game_player',
            name='pid',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sport.Profile'),
        ),
        migrations.AddField(
            model_name='game_event',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sport.Game'),
        ),
        migrations.AddField(
            model_name='game',
            name='bestPlayer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sport.Profile'),
        ),
        migrations.AddField(
            model_name='game',
            name='news',
            field=models.ManyToManyField(to='sport.New'),
        ),
        migrations.AddField(
            model_name='game',
            name='team1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='home', to='sport.Team'),
        ),
        migrations.AddField(
            model_name='game',
            name='team2',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='guest', to='sport.Team'),
        ),
        migrations.AddField(
            model_name='footballseasondetail',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sport.Profile'),
        ),
        migrations.AddField(
            model_name='cup',
            name='match',
            field=models.ManyToManyField(to='sport.Game'),
        ),
        migrations.AddField(
            model_name='comment',
            name='new',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sport.New'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='basketseasondetail',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sport.Profile'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='favoriteGames',
            field=models.ManyToManyField(to='sport.Game'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='favoriteNews',
            field=models.ManyToManyField(to='sport.New'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='siteuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
